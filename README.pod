
=head1 NAME

Interview::WorkSample - Sample of setting up a simple CPAN style module


=head1 SYNOPSIS

    use Interview::WorkSample;

        # Number of test-cases expected to be run
    my $work_sample = Interview::WorkSample->new(<num_test_cases>);
        
        # Test case consists of two lines of input
    my $test_case = $work_sample->Parse(<line-1>, <line-2>);

    my $result = $work_sample->Solution($test_case);

=head1 DESCRIPTION

This project is intended to be a work-sample test for a perl programming
and software-develoer-in-test position. Please find the description of the problem
being solved below, as well as the description of the expected tasks for each position

The actual code revolves around a problem available at https://www.hackerrank.com/challenges/angry-professor

=head2 TASKS

For the purpose of completing the work-sample test, please complete the task as described for the position
for which you applied

=head3 SOFTWARE DEVELOPER

The current abstractions (as described in L<#METHODS>) for this problem set are sub-optimal, and don't really
model the problem as concretely as it could, not to mention it mixes aspects of program input (i.e. parsing 
user input) with the actual solution.

Your task is to refine this model and come up with a better set of abstractions, along with updating the
appropriate unit/integration tests as found in the t/ directory.


=head3 SOFTWARE DEVELOPER IN TEST

Despite the current abstractions being sub-optimal, your task will be to write unit/integration tests
to exercise the logic within the methods described below, their overall integration together, and to
document any failure modes or test-cases that you deem appropriate.

=head2 METHODS

=over 12

=item C<new>

creates an encapsulated object containing the number of test cases expected to be run (needless information)

=item C<Parse>

Parse and return an object representing all the information relevant to this test case. How this is parsed
is described from the problem description

=item C<Solution>

Calculate the solution given an object representing all of the invormation relevant to this test case (
as generated/created by the C<Parse> function.

=back

=head1 LICENSE

This project is licensed under the Apache License. See L<LICENSE>.

=head1 AUTHOR>

L<Robert Novak|mailto:robertn@ccbill.com>

=cut


